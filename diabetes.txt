# Name:ASHISH BANSAL
# Diabetes Prediction using  Machine Learning
# To predict accuracy of person sufdering from diabetes while working on  PIMA diabetes dataset downloaded from  kaggle
# Myworkspace on google drive : untitled.pynb
# work in google colabatory

///understanding
1.A normal fasting blood glucose level for a person without diabetes is 70 to 100 milligrams per deciliter.
2.with respect to blood pressure,the first number (120) is called the systolic pressure. It indicates the highest pressure exerted as blood pushes through your heart. The second number (80) is called the diastolic pressure. This is the pressure maintained by the arteries when the vessels are relaxed between heartbeats.

According to the American Heart Association (AHA), healthy people over 20 with a blood pressure lower than 120/80 should get their blood pressure checked once every two years. People with diabetes need to be more vigilant.






#code
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

%matplotlib inline

from google.colab import drive
drive.mount('/content/drive')


data=pd.read_csv('/content/drive/MyDrive/diabetes.csv')    /// diabetes.csv is actually a dataset downloaded from kaggle  for diabetes predection


data.shape //(768, 10)
data.head(5)


# check if any null value is present
data.isnull().values.any()



## Correlation
import seaborn as sns
import matplotlib.pyplot as plt
#get correlations of each features in dataset
corrmat = data.corr()


top_corr_features = corrmat.index
plt.figure(figsize=(20,20)) 

#Feature Selection Techniques in Machine Learning with Python
#plot heat map

g=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap="RdYlGn")



data.corr()

diabetes_map = {True: 1, False: 0}
data['diabetes'] = data['diabetes'].map(diabetes_map)
data.head(5)


diabetes_true_count = len(data.loc[data['diabetes'] == True])
diabetes_false_count = len(data.loc[data['diabetes'] == False])

(diabetes_true_count,diabetes_false_count)

(268, 500)

## Train Test Split

from sklearn.model_selection import train_test_split
feature_columns = ['num_preg', 'glucose_conc', 'diastolic_bp', 'insulin', 'bmi', 'diab_pred', 'age', 'skin']
predicted_class = ['diabetes']
X = data[feature_columns].values

y = data[predicted_class].values


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state=10)


from sklearn.preprocessing import Imputer

fill_values = Imputer(missing_values=0, strategy="mean", axis=0)

X_train = fill_values.fit_transform(X_train)
X_test = fill_values.fit_transform(X_test)


## Apply Algorithm

from sklearn.ensemble import RandomForestClassifier
random_forest_model = RandomForestClassifier(random_state=10)
random_forest_model.fit(X_train, y_train.ravel())


predict_train_data = random_forest_model.predict(X_test)
from sklearn import metrics
print("Accuracy = {0:.3f}".format(metrics.accuracy_score(y_test, predict_train_data)))


Accuracy = 0.719 /// prediction of diabetes






